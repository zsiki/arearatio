# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AreaRatio
                                 A QGIS plugin
 Area ratio of polygons within an other polygon (different layers)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-11-26
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Zoltan Siki
        email                : siki1958@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QPoint
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.gui import QgsMapTool
from qgis.core import QgsPoint, QgsProject, QgsSpatialIndex, \
        QgsFeatureRequest, QgsGeometry, QgsProcessingFeatureSourceDefinition
from qgis import processing

# Initialize Qt resources from file resources.py
from .resources import *
import os.path

class AreaRatio:
    """QGIS Plugin Implementation."""


    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'AreaRatio_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('AreaRatio', message)

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/arearatio/icon.png'
        self.action = QAction(QIcon(icon_path),
                                        self.tr(u'Area Ratio'),
                                        self.iface.mainWindow())
        self.action.triggered.connect(self.run)
        self.iface.addToolBarIcon(self.action)
        self.iface.addPluginToMenu(u'Area Ratio', self.action)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        self.iface.removePluginMenu(u'Area Ratio', self.action)
        self.iface.removeToolBarIcon(self.action)

    def run(self):
        """Run method that performs all the real work"""
        tool = PointTool(self.iface.mapCanvas())
        self.iface.mapCanvas().setMapTool(tool)

class PointTool(QgsMapTool):

    POLY_LAYER = "TELEK"    # large polygons
    # smaller polygons
    IN_POLY_LAYERS = ("Lakóépület", "Középület", "Gazdasági épület",
                      "Melléképület", "Üdülőépület", "Toronyépület",
                      "Üzemi épület", "Vegyes rendeltetésű épület")

    def __init__(self, canvas):
        QgsMapTool.__init__(self, canvas)
        self.canvas = canvas
        self.index = None
        self.poly_layer = None
        self.poly_path = None

    def activate(self):
        super().activate()

    def deactivate(self):
        super().deactivate()
        self.deactivated.emit()

    def canvasPressEvent(self, event):
        x = event.pos().x()
        y = event.pos().y()
        pos = self.toMapCoordinates(QPoint(x, y))
        if self.poly_layer is None:
            poly_layers = QgsProject.instance().mapLayersByName(self.POLY_LAYER)
            if len(poly_layers) == 0:
                QMessageBox(None, self.tr("Area ratio"),
                        self.tr("{} layer not found".format(self.POLY_LAYER)))
                return
            self.poly_layer = poly_layers[0]
            # remove | layer: 0 tag from the end
            self.poly_path = self.poly_layer.dataProvider().dataSourceUri().split('|')[0]
            # build index for POLYGON layer
            self.index = QgsSpatialIndex()
            for feat in self.poly_layer.getFeatures():
                self.index.insertFeature(feat)

        # find polygons which MBR cover point
        fids = self.index.nearestNeighbor(pos)
        request = QgsFeatureRequest()
        request.setFilterFids(fids)
        features = self.poly_layer.getFeatures(request)
        p_geom = QgsGeometry.fromPointXY(pos)
        f = None
        for feat in features:
            if feat.geometry().intersects(p_geom):
                f = feat
                break
        else:
            # No poly found
            QMessageBox(None, self.tr("Area ratio"),
                    self.tr("Feature not found on layer {} ".format(self.POLY_LAYER)))
            return
        # remove previous selection
        self.poly_layer.removeSelection()
        # select polygon clicked
        self.poly_layer.select(f.id())
        area1 = f.geometry().area() # parcel area
        area2 = 0   # sum area for IN_POLY_LAYERS
        msg = self.POLY_LAYER + ": {:.1f}\n".format(area1)
        # go through building layers
        for name in self.IN_POLY_LAYERS:
            layers = QgsProject.instance().mapLayersByName(name)
            if len(layers) == 0:
                QMessageBox(None, self.tr("Area ratio"),
                        self.tr("{} layer not found".format(name)))
                continue
            layer = layers[0]
            # remove | layer: 0 tag from the end
            layer_path = layer.dataProvider().dataSourceUri().split('|')[0]
            processing.run("native:selectbylocation",
                {'INPUT': layer_path,
                 'INTERSECT': QgsProcessingFeatureSourceDefinition(self.poly_path, True),
                 'METHOD': 0, 'PREDICATE': [0]})
            features = layer.selectedFeatures()
            n = 0
            area3 = 0   # sum area for actual layer
            for feat in features:
                p = feat.geometry().pointOnSurface()
                if p.intersects(f.geometry()):
                    warea = feat.geometry().area()
                    n += 1
                    area3 += warea  # total area in this layer
                    area2 += warea  # total area in all layers
            if n > 0:
                msg = msg + "\n{:d} {}: {:.1f}".format(n, name, area3)
            layer.removeSelection()
        msg = msg + "\n\n{:.1f} %".format(area2 / area1 * 100.0)
        QMessageBox.information(None, self.tr("Area ratio"), msg)
